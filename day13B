// http://adventofcode.com/2017/day/13

// --- Part Two ---
// Now, you need to pass through the firewall without being caught - easier said than done.

// You can't control the speed of the packet, but you can delay it any number of picoseconds. For each picosecond you delay the packet before beginning your trip, all security scanners move one step. You're not in the firewall during this time; you don't enter layer 0 until you stop delaying the packet.

// In the example above, if you delay 10 picoseconds (picoseconds 0 - 9), you won't get caught:

// State after delaying:
//  0   1   2   3   4   5   6
// [ ] [S] ... ... [ ] ... [ ]
// [ ] [ ]         [ ]     [ ]
// [S]             [S]     [S]
//                 [ ]     [ ]

// Picosecond 10:
//  0   1   2   3   4   5   6
// ( ) [S] ... ... [ ] ... [ ]
// [ ] [ ]         [ ]     [ ]
// [S]             [S]     [S]
//                 [ ]     [ ]

//  0   1   2   3   4   5   6
// ( ) [ ] ... ... [ ] ... [ ]
// [S] [S]         [S]     [S]
// [ ]             [ ]     [ ]
//                 [ ]     [ ]


// Picosecond 11:
//  0   1   2   3   4   5   6
// [ ] ( ) ... ... [ ] ... [ ]
// [S] [S]         [S]     [S]
// [ ]             [ ]     [ ]
//                 [ ]     [ ]

//  0   1   2   3   4   5   6
// [S] (S) ... ... [S] ... [S]
// [ ] [ ]         [ ]     [ ]
// [ ]             [ ]     [ ]
//                 [ ]     [ ]


// Picosecond 12:
//  0   1   2   3   4   5   6
// [S] [S] (.) ... [S] ... [S]
// [ ] [ ]         [ ]     [ ]
// [ ]             [ ]     [ ]
//                 [ ]     [ ]

//  0   1   2   3   4   5   6
// [ ] [ ] (.) ... [ ] ... [ ]
// [S] [S]         [S]     [S]
// [ ]             [ ]     [ ]
//                 [ ]     [ ]


// Picosecond 13:
//  0   1   2   3   4   5   6
// [ ] [ ] ... (.) [ ] ... [ ]
// [S] [S]         [S]     [S]
// [ ]             [ ]     [ ]
//                 [ ]     [ ]

//  0   1   2   3   4   5   6
// [ ] [S] ... (.) [ ] ... [ ]
// [ ] [ ]         [ ]     [ ]
// [S]             [S]     [S]
//                 [ ]     [ ]


// Picosecond 14:
//  0   1   2   3   4   5   6
// [ ] [S] ... ... ( ) ... [ ]
// [ ] [ ]         [ ]     [ ]
// [S]             [S]     [S]
//                 [ ]     [ ]

//  0   1   2   3   4   5   6
// [ ] [ ] ... ... ( ) ... [ ]
// [S] [S]         [ ]     [ ]
// [ ]             [ ]     [ ]
//                 [S]     [S]


// Picosecond 15:
//  0   1   2   3   4   5   6
// [ ] [ ] ... ... [ ] (.) [ ]
// [S] [S]         [ ]     [ ]
// [ ]             [ ]     [ ]
//                 [S]     [S]

//  0   1   2   3   4   5   6
// [S] [S] ... ... [ ] (.) [ ]
// [ ] [ ]         [ ]     [ ]
// [ ]             [S]     [S]
//                 [ ]     [ ]


// Picosecond 16:
//  0   1   2   3   4   5   6
// [S] [S] ... ... [ ] ... ( )
// [ ] [ ]         [ ]     [ ]
// [ ]             [S]     [S]
//                 [ ]     [ ]

//  0   1   2   3   4   5   6
// [ ] [ ] ... ... [ ] ... ( )
// [S] [S]         [S]     [S]
// [ ]             [ ]     [ ]
//                 [ ]     [ ]
// Because all smaller delays would get you caught, the fewest number of picoseconds you would need to delay to get through safely is 10.

// What is the fewest number of picoseconds that you need to delay the packet to pass through the firewall without being caught?

// Your puzzle answer was 3970918.


window.CP.PenTimer.MAX_TIME_IN_LOOP_WO_EXIT = 10000;

//console.time("checkcaught");
var output = calc(`0: 3
1: 2
2: 9
4: 4
6: 4
8: 6
10: 6
12: 8
14: 5
16: 6
18: 8
20: 8
22: 8
24: 6
26: 12
28: 12
30: 8
32: 10
34: 12
36: 12
38: 10
40: 12
42: 12
44: 12
46: 12
48: 14
50: 14
52: 8
54: 12
56: 14
58: 14
60: 14
64: 14
66: 14
68: 14
70: 14
72: 14
74: 12
76: 18
78: 14
80: 14
86: 18
88: 18
94: 20
98: 18`);

// should give 3970918

//console.timeEnd("checkcaught");
console.log(output);


// calc(`0: 3
// 1: 2
// 4: 4
// 6: 4`);
// should give 10

function calc(input){
    window.count = 0;
    const startingInstance = processInput(input);
    const lastDepth = startingInstance[startingInstance.length-1].depth;
    do {
        if(window.count!==0) doOneStep(startingInstance, 0);
        const array = clone(startingInstance);
        if(getCaught2(array, lastDepth)) window.count++;
        else return window.count;
    } while(true);
}

// faster!
function getCaught2(array){
    return array.some(scanner => {
        for(let j=0; j<scanner.depth; j++){
            doOneStepLayer(scanner);
        }
        return scanner.pos === 1;
    });
}

// slower
function getCaught(array, lastDepth){
    let x = -1;
    for(let i=0; i<=lastDepth; i++){
         if(step(++x, array) === "CAUGHT") return true;
    }
    return false;
}

function step(x, array){
    if(array.find(layer => layer.depth === x && layer.pos === 1)) return "CAUGHT";
    else doOneStep(array, x);
}

function doOneStep(array, idx){
    array.forEach(layer=>{
        if(layer.depth >= idx){
            doOneStepLayer(layer);
        }
    });
}

function doOneStepLayer(layer){
    layer.pos += layer.direction;
    if(layer.pos===layer.range || layer.pos===1) layer.direction *= -1;   
}

function processInput(input){
    const array = [];
    input.split('\n').forEach(layer=> {
        const obj = {};
        obj.depth = parseInt(layer.split(': ')[0]);
        obj.range = parseInt(layer.split(': ')[1]);
        obj.pos = 1;
        obj.direction = 1; // 1 means forward/downwards, -1 means backwards/upwards
        array.push(obj);
    });
    return array;
}

function clone(array){
    return array.map(scanner => {
	const obj = {};	obj.depth = scanner.depth;
	obj.range = scanner.range;
	obj.pos = scanner.pos;
	obj.direction = scanner.direction;
	return obj;
});
}
