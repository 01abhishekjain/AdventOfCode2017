// http://adventofcode.com/2017/day/14

// --- Part Two ---
// Now, all the defragmenter needs to know is the number of regions. A region is a group of used squares that are all adjacent, not including diagonals. Every used square is in exactly one region: lone used squares form their own isolated regions, while several adjacent squares all count as a single region.

// In the example above, the following nine regions are visible, each marked with a distinct digit:

// 11.2.3..-->
// .1.2.3.4   
// ....5.6.   
// 7.8.55.9   
// .88.5...   
// 88..5..8   
// .8...8..   
// 88.8.88.-->
// |      |   
// V      V   
// Of particular interest is the region marked 8; while it does not appear contiguous in this small view, all of the squares marked 8 are connected when considering the whole 128x128 grid. In total, in this example, 1242 regions are present.

// How many regions are present given your key string?

// Your puzzle input is still hfdlxzhv.

window.CP.PenTimer.MAX_TIME_IN_LOOP_WO_EXIT = 10000;
console.log(calc('hfdlxzhv'));

function calc(input){
    const arrayOfBits = getArrayOfBits(input);

    return getNbRegions(arrayOfBits);
}

function getNbRegions(arrayOfBits){
    let nbRegions = 1; // so that the first region will be counted as 2, because the grid already contains 0s and 1s, will decrement eventually
    for(let i=0; i<128; i++){
        for(let j=0; j<128; j++){
            if(arrayOfBits[i][j] == 1){
                startChecking(i,j, ++nbRegions, arrayOfBits);
            }
        }
    }

    return --nbRegions;
}

function startChecking(i,j, regionNb, arrayOfBits){
    if(arrayOfBits[i][j] != 1) return; // check again since a child instance of the function might have already reached here

    arrayOfBits[i][j] = regionNb+'';

    if( i+1<=127 && arrayOfBits[i+1][j] == 1) startChecking(i+1, j, regionNb, arrayOfBits);
    if( i-1>=0   && arrayOfBits[i-1][j] == 1) startChecking(i-1, j, regionNb, arrayOfBits);
    if( j+1<=127 && arrayOfBits[i][j+1] == 1) startChecking(i, j+1, regionNb, arrayOfBits);
    if( j-1>=0   && arrayOfBits[i][j-1] == 1) startChecking(i, j-1, regionNb, arrayOfBits);
}

function getArrayOfBits(input){
    const arrayOfBits = [];
    for (let i = 0; i < 128; i++) {
        const hash = getHash(input + '-' + i );
        const bits = getBits(hash);
        arrayOfBits.push(bits.split(''));
    }
    return arrayOfBits;
}

function getCount(arrayOfBits){
    return arrayOfBits.reduce( (sum, bits)=> {
        return sum + bits.split('').reduce( (sum, n)=>{ return parseInt(n)===1 ? ++sum : sum },0);
    } ,0)
}

function getBits(hash){
    return hash.split('').map(n=>getBit(n)).join('');
}

function getBit(n){
    let hex = parseInt(n+'', 16).toString(2);
    if(hex.length<4) {
        hex = 10000 + parseInt(hex);
        hex = hex+'';
        hex = hex.substr(1);
    }
    return hex;
}

function getHash(input){
    const list = [];
    for (var i = 0; i < 256; i++) {
      list.push(i);
    }
    var sparseHash = getSparseHash(list, input);
    var denseHash = getDenseHash(sparseHash);
    var hex = getHex(denseHash);
    return hex;
}

function getHex(denseHash){
    var output = '';
    for(var i=0; i<16; i++){
        let hx = denseHash[i].toString(16);
        if(hx.length===1) hx = '0' + hx;
        output += hx;
    }
    return output;
}

function getDenseHash(sparseHash){
    var denseHash = [];
    for(var i=0; i<256; i+=16){
        denseHash.push(
            // lel i dont care
            sparseHash[i]^sparseHash[i+1]^sparseHash[i+2]^sparseHash[i+3]^
            sparseHash[i+4]^sparseHash[i+5]^sparseHash[i+6]^sparseHash[i+7]^
            sparseHash[i+8]^sparseHash[i+9]^sparseHash[i+10]^sparseHash[i+11]^
            sparseHash[i+12]^sparseHash[i+13]^sparseHash[i+14]^sparseHash[i+15] 
        );
    }
    return denseHash;
}

function getSparseHash(list, input){
    input = processInput(input);
    let pos = (skip = 0);  
    for (let i = 0; i < 64; i++) {
        [list, pos, skip] = round(list, input, pos, skip);
    }
    return list;
}

function round(list, input, pos, skip) {
  for (let i = 0; i < input.length; i++) {
    [list, pos, skip] = knot(list, input[i], pos, skip);
  }
  return [list, pos, skip];
}

function knot(list, length, pos, skip) {
  let elements = getElements(list, length, pos);
  elements = elements.reverse();
  [list, pos] = fillElements(list, elements, pos);
  pos = addSkip(list, pos, skip);
  skip++;
  return [list, pos, skip];
}

function getElements(list, length, pos) {
  const els = [];
  do {
    els.push(list[pos]);
    pos = pos === list.length - 1 ? 0 : pos + 1;
    --length;
  } while (length > 0);
  return els;
}

function fillElements(list, elements, pos) {
  let count = 0;
  do {
    list[pos] = elements[count];
    pos = pos === list.length - 1 ? 0 : pos + 1;
    ++count;
  } while (count < elements.length);
  return [list, pos];
}

function addSkip(list, pos, skip) {
  while (skip > 0) {
    pos = pos === list.length - 1 ? 0 : pos + 1;
    --skip;
  }
  return pos;
}


function processInput(input){
    var output = [];
    for(var i=0; i<(input?input.length:0); i++){
        output.push(input[i].charCodeAt());
    }
    output = output.concat([17, 31, 73, 47, 23]);
    return output;
}
